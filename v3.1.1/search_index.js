var documenterSearchIndex = {"docs":
[{"location":"pages/plugins/#plugins","page":"Plugins","title":"Plugins","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"You can add auxiliary elements to your chart using plugins (via the plugins keyword).","category":"page"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"LWCPlugin","category":"page"},{"location":"pages/plugins/#LightweightCharts.LWCPlugin","page":"Plugins","title":"LightweightCharts.LWCPlugin","text":"LWCPlugin\n\nType containing information about chart active plugins.\n\nSee also: plugins.\n\n\n\n\n\n","category":"type"},{"location":"pages/plugins/#Vertical-line","page":"Plugins","title":"Vertical line","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"lwc_vert_line","category":"page"},{"location":"pages/plugins/#LightweightCharts.Plugins.lwc_vert_line","page":"Plugins","title":"LightweightCharts.Plugins.lwc_vert_line","text":"lwc_vert_line(index::Int64; kw...) -> LWCPlugin\n\nAdds a vertical line based on index to the chart.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nlabel_text::String \"\" Vertical line label.\nwidth::Float64 3.0 Vertical line width.\ncolor::String Random color Color of the vertical line.\nlabel_background_color::String Random color Label background color.\nlabel_text_color::String \"white\" Label text color.\nshow_label::Bool false Label visibility.\n\n\n\n\n\n","category":"function"},{"location":"pages/plugins/#Examples","page":"Plugins","title":"Examples","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(0:300)\nx_values = map(x -> 1/(x - 250), 0:300)\n\nchart = lwc_line(\n    t_values,\n    x_values;\n    line_color = \"#7678ed\",\n    label_name = \"hyperbola\",\n    price_scale_id = LWC_RIGHT,\n    plugins = [\n        lwc_vert_line(\n            250;\n            color = \"#f18701\",\n            label_background_color = \"#f35b04\",\n            show_label = true,\n            label_text = \"lwc_vert_line\",\n        ),\n    ],\n)\n\nlwc_save(\"vert_line_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"    <iframe src=\"../vert_line_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/plugins/#Tooltip","page":"Plugins","title":"Tooltip","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"lwc_tooltip","category":"page"},{"location":"pages/plugins/#LightweightCharts.Plugins.lwc_tooltip","page":"Plugins","title":"LightweightCharts.Plugins.lwc_tooltip","text":"lwc_vert_line(; kw...) -> LWCPlugin\n\nAdds a dynamic tooltip to the chart following the cursor and displaying the values.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nline_color::String \"rgba(0, 0, 0, 0.2)\" Tooltip line color.\ntitle::String \"\" Tooltip title.\nfollow_mode::LWC_TOOLTIP_TYPE LWC_TOOLTIP_TOP (LWC_TOOLTIP_TRACK) Tooltip Location.\nhorizontal_deadzone_width::Int64 45 \nvertical_deadzone_height::Int64 100 Horizontal deadzone height.\nvertical_spacing::Int64 20 Vertical spacing.\ntop_offset::Int64 20 Vertical offset for tooltip.\n\n\n\n\n\n","category":"function"},{"location":"pages/plugins/#Examples-2","page":"Plugins","title":"Examples","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:300)\nx_values = map(x -> cos(x / 10), 1:300)\n\nchart = lwc_line(\n    t_values,\n    x_values;\n    line_color = \"#0fa3b1\",\n    label_name = \"cos\",\n    line_type = LWC_STEP,\n    line_width = 2,\n    price_scale_id = LWC_RIGHT,\n    plugins = [\n        lwc_tooltip(;\n            line_color = \"#7400b8\",\n            follow_mode = LWC_TOOLTIP_TRACK,\n        ),\n    ],\n)\n\nlwc_save(\"tooltip_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"    <iframe src=\"../tooltip_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/plugins/#Delta-tooltip","page":"Plugins","title":"Delta tooltip","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"lwc_delta_tooltip","category":"page"},{"location":"pages/plugins/#LightweightCharts.Plugins.lwc_delta_tooltip","page":"Plugins","title":"LightweightCharts.Plugins.lwc_delta_tooltip","text":"lwc_vert_line(; kw...) -> LWCPlugin\n\nAdds a dynamic tooltip to the chart following the cursor and displaying the values (and their change, while holding down the mouse button).\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nline_color::String \"rgba(0, 0, 0, 0.2)\" Line color.\nshow_time::Bool false Detailed time display.\ntop_offset::Int64 20 Vertical offset for tooltip.\n\n\n\n\n\n","category":"function"},{"location":"pages/plugins/#Examples-3","page":"Plugins","title":"Examples","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:300)\nx_values = map(x -> sin(x / 10), 1:300)\n\nchart = lwc_line(\n    t_values,\n    x_values;\n    line_color = \"#90be6d\",\n    label_name = \"sin\",\n    line_width = 2,\n    price_scale_id = LWC_RIGHT,\n    plugins = [\n        lwc_delta_tooltip(;\n            show_time = true,\n            top_offset = 10,\n        ),\n    ],\n)\n\nlwc_save(\"delta_tooltip_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"    <iframe src=\"../delta_tooltip_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/plugins/#Trend-line","page":"Plugins","title":"Trend line","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"lwc_trend_line","category":"page"},{"location":"pages/plugins/#LightweightCharts.Plugins.lwc_trend_line","page":"Plugins","title":"LightweightCharts.Plugins.lwc_trend_line","text":"lwc_trend_line(start_index, start_price, end_index, end_price; kw...) -> LWCPlugin\n\nAdds a trend line to the chart starting with start_index and start_price and ending with end_index and end_price.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nline_color::String Random color Line color.\nwidth::Int64 6 Line width.\nshow_labels::Bool true Labels visibility.\nlabel_background_color::String \"rgba(255, 255, 255, 0.85)\" Label background color.\nlabel_text_color::String \"rgb(0, 0, 0)\" Label text color.\n\n\n\n\n\n","category":"function"},{"location":"pages/plugins/#Examples-4","page":"Plugins","title":"Examples","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:300)\nx_values = map(x -> cos(x / 10), 1:300)\n\nchart = lwc_line(\n    t_values,\n    x_values;\n    line_color = \"#c77dff\",\n    label_name = \"cos\",\n    price_scale_id = LWC_RIGHT,\n    plugins = [\n        lwc_trend_line(\n            220,\n            -0.7,\n            250,\n            1.3;\n            line_color = \"#ff6700\",\n        ),\n    ],\n)\n\nlwc_save(\"trend_line_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"    <iframe src=\"../trend_line_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/plugins/#Crosshair-bar","page":"Plugins","title":"Crosshair bar","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"lwc_crosshair_highlight_bar","category":"page"},{"location":"pages/plugins/#LightweightCharts.Plugins.lwc_crosshair_highlight_bar","page":"Plugins","title":"LightweightCharts.Plugins.lwc_crosshair_highlight_bar","text":"lwc_crosshair_highlight_bar(; kw...) -> LWCPlugin\n\nAdds additional highlighting to the cursor crosshairs.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\ncolor::String \"rgba(0, 0, 0, 0.2)\" Crosshair highlight color.\n\n\n\n\n\n","category":"function"},{"location":"pages/plugins/#Examples-5","page":"Plugins","title":"Examples","text":"","category":"section"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:300)\nx_values = map(x -> cos(x / 10), 1:300)\n\nchart = lwc_line(\n    t_values,\n    x_values;\n    line_color = \"#0a9396\",\n    label_name = \"cos\",\n    price_scale_id = LWC_RIGHT,\n    plugins = [\n        lwc_crosshair_highlight_bar(;\n            color = \"#94d2bd\",\n        ),\n    ],\n)\n\nlwc_save(\"crosshair_bar_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/plugins/","page":"Plugins","title":"Plugins","text":"    <iframe src=\"../crosshair_bar_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/utils/#Utils","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"pages/utils/","page":"Utils","title":"Utils","text":"lwc_save\nlwc_show","category":"page"},{"location":"pages/utils/#LightweightCharts.lwc_save","page":"Utils","title":"LightweightCharts.lwc_save","text":"lwc_save(filepath::String, plt)\n\nSaves a chart plt by the filepath (the preferred saved file extension is html).\n\nSee also lwc_show.\n\n\n\n\n\n","category":"function"},{"location":"pages/utils/#LightweightCharts.lwc_show","page":"Utils","title":"LightweightCharts.lwc_show","text":"lwc_show(plt; filepath = joinpath(homedir(), \"lightweightcharts.html\"))\n\nSaves a chart plt by the filepath and then displays it in the browser.\n\nSee also lwc_save.\n\n\n\n\n\n","category":"function"},{"location":"pages/layout/#Layouts","page":"Layouts","title":"Layouts","text":"","category":"section"},{"location":"pages/layout/","page":"Layouts","title":"Layouts","text":"Here you can find various examples that show how a user can combine different charts, plugins and panels together.","category":"page"},{"location":"pages/layout/#Panel","page":"Layouts","title":"Panel","text":"","category":"section"},{"location":"pages/layout/","page":"Layouts","title":"Layouts","text":"LWCPanel\nlwc_panel","category":"page"},{"location":"pages/layout/#LightweightCharts.LWCPanel","page":"Layouts","title":"LightweightCharts.LWCPanel","text":"LWCPanel\n\nA type that allows you to combine multiple charts for visualization.\n\nSee also: lwc_panel.\n\n\n\n\n\n","category":"type"},{"location":"pages/layout/#LightweightCharts.lwc_panel","page":"Layouts","title":"LightweightCharts.lwc_panel","text":"lwc_panel(charts::LWCChart...; kw...) -> LWCPanel\n\nCreates a panel combining several charts.\n\nKeyword arguments\n\nName::Type Default/Possible values Description\nx::Int64 -999 Panel's horizontal coordinates\ny::Int64 -999 Panel's vertical coordinates\nh::Float64 0.5 Height of the panel as a fraction of the total window height.\nname::String \"\" Panel name (will be displayed in the panel header).\nmin_y::Union{Real,Nothing} nothing Lower bound on the y-axis.\nleft_min_y::Union{Real,Nothing} nothing Lower bound on the left y-axis.\nright_min_y::Union{Real,Nothing} nothing Lower bound on the right y-axis.\nmax_y::Union{Real,Nothing} nothing Upper bound on the y-axis.\nleft_max_y::Union{Real,Nothing} nothing Upper bound on the left y-axis.\nright_max_y::Union{Real,Nothing} nothing Upper bound on the right y-axis.\nseconds_visible::Bool false Seconds visibility on the x-axis.\nbar_spacing::Real 6 Distance between the stripes in pixels.\nmin_bar_spacing::Real 0.5 Minimum distance between the stripes in pixels.\ntooltip::Bool true Enables tooltip for points.\ntooltip_format::String \"${label_name}: (${time}, ${value})\" String formatting of tooltip text. Display the variables \"title\", \"time\" and \"value\" in the desired format.\nmin_charts_for_search 10 Minimum number of charts to search.\nmode::LWC_PRICE_SCALE_MODE 0 Price scale mode.\ncrosshair_settings::CrosshairOptions CrosshairOptions() Structure describing crosshair options.\ncursor::LWC_CURSOR LWC_CURSOR_DEFAUL Cursor type.\nlast_value_visible::Bool false Shows the latest price label on the price scale.\ntitle_visible::Bool false Shows the chart name next to the latest price label.\nlegend_mode::LWC_LEGEND_MODE LWC_LEGEND_LIST_MODE (LWC_LEGEND_LIST_MODE, LWC_LEGEND_TABLE_MODE) Legend box display type.\ndefault_legend_visible::Bool true Shows the legend box with data charts names and colors.\n\n\n\n\n\n","category":"function"},{"location":"pages/layout/#Example","page":"Layouts","title":"Example","text":"","category":"section"},{"location":"pages/layout/","page":"Layouts","title":"Layouts","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:500)\nx_values = map(x -> rand(1:500), collect(1:500))\n\npanel = lwc_panel(\n    lwc_line(\n        t_values,\n        x_values .+ 500.0;\n        label_name = \"lwc_line\",\n        line_color = \"#f35B04\",\n        line_visible = false,\n        point_markers_visible = true,\n        price_scale_id = LWC_RIGHT,\n    ),\n    lwc_histogram(\n        t_values,\n        x_values;\n        label_name = \"lwc_histogram\",\n        base = 250.0,\n        color = \"rgba(118, 120, 237, 0.5)\",\n        price_scale_id = LWC_RIGHT,\n    );\n    name = \"Panel example\",\n    crosshair_settings = CrosshairOptions(;\n        mode = LWC_CROSSHAIR_NORMAL,\n        vert_line = CrosshairLineOptions(;\n            style = LWC_CROSSHAIR_SOLID,\n            color = \"#C3BCDB44\",\n            label_background_color = \"#9B7DFF\",\n            width = 8,\n        ),\n        horz_line = CrosshairLineOptions(;\n            color = \"#9B7DFF\",\n            label_background_color = \"#9B7DFF\",\n        )\n    ),\n)\n\nlwc_save(\"panel_example.html\", panel)\nnothing # hide","category":"page"},{"location":"pages/layout/","page":"Layouts","title":"Layouts","text":"    <iframe src=\"../panel_example.html\" style=\"height:600px;width:100%;\"></iframe>","category":"page"},{"location":"pages/layout/#Layout","page":"Layouts","title":"Layout","text":"","category":"section"},{"location":"pages/layout/","page":"Layouts","title":"Layouts","text":"LWCLayout\nlwc_layout","category":"page"},{"location":"pages/layout/#LightweightCharts.LWCLayout","page":"Layouts","title":"LightweightCharts.LWCLayout","text":"LWCLayout\n\nType describing the layout for arranging multiple panels.\n\nSee also: lwc_layout.\n\n\n\n\n\n","category":"type"},{"location":"pages/layout/#LightweightCharts.lwc_layout","page":"Layouts","title":"LightweightCharts.lwc_layout","text":"lwc_layout(panels::LWCPanel...; kw...) -> LWCLayout\n\nCombines multiple panels into a common layout.\n\nKeyword arguments\n\nName::Type Default (Possible) values Description\nname::String \"LightweightCharts ❤️ Julia\" Layout name (will be displayed in the browser tab title).\nsync::Bool true Synchronization of chart scrolling.\nmin_height::Integer 300 Minimum of layout height in px.\nresizable::Bool true Enables resize mode of panels.\n\n\n\n\n\n","category":"function"},{"location":"pages/layout/#Example-2","page":"Layouts","title":"Example","text":"","category":"section"},{"location":"pages/layout/","page":"Layouts","title":"Layouts","text":"using Dates, NanoDates\nusing LightweightCharts\n\nlayout = lwc_layout(\n    lwc_panel(\n        lwc_baseline(\n            NanoDate(\"2024-01-01\") .+ Second.(1:500),\n            map(x -> rand(1:500), collect(1:500));\n            label_name = \"lwc_baseline\",\n            base_value = LWCBaseValue(\"price\", 250),\n            top_line_color = \"#6a994e\",\n            top_fill_color1 = \"#a7c957\",\n            bottom_line_color = \"#e76f51\",\n            bottom_fill_color2 = \"#f4a261\",\n            line_style = LWC_SOLID,\n            line_type = LWC_CURVED,\n            line_width = 3,\n            precision = 4,\n            price_scale_id = LWC_RIGHT,\n        );\n        tooltip = false,\n        last_value_visible = true,\n        title_visible = true,\n        x = 1,\n        y = 1,\n    ),\n    lwc_panel(\n        lwc_area(\n            NanoDate(\"2024-01-01\") .+ Second.(1:500),\n            map(x -> sin(x / 10), collect(1:500));\n            label_name = \"lwc_area\",\n            line_color = \"#2ec4b6\",\n            top_color = \"#cbf3f0\",\n            bottom_color = \"rgba(133, 242, 240, 0)\",\n            line_style = LWC_SOLID,\n            line_type = LWC_STEP,\n            line_width = 2,\n            precision = 3,\n            price_scale_id = LWC_RIGHT,\n        ),\n        lwc_line(\n            NanoDate(\"2024-01-01\") .+ Second.(1:500),\n            map(x -> cos(x / 10), collect(1:500));\n            label_name = \"lwc_line\",\n            line_color = \"#ff7d00\",\n            line_style = LWC_SPARSE_DOTTED,\n            line_type = LWC_SIMPLE,\n            line_width = 3,\n            price_scale_id = LWC_RIGHT,\n        );\n        tooltip_format = \"\\${label_name}: \\${value}\",\n        default_legend_visible = true,\n        x = 1,\n        y = 2,\n    );\n    min_height = 480,\n    name = \"Layout example\",\n)\n\nlwc_save(\"layout_example.html\", layout)\nnothing # hide","category":"page"},{"location":"pages/layout/","page":"Layouts","title":"Layouts","text":"    <iframe src=\"../layout_example.html\" style=\"height:700px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/#charts","page":"Charts","title":"Charts","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"LWCChart","category":"page"},{"location":"pages/charts/#LightweightCharts.LWCChart","page":"Charts","title":"LightweightCharts.LWCChart","text":"LWCChart\n\nThe base type that contains the necessary information for visualizing a single chart (and its plugins).\n\nSee also: lwc_show, lwc_save.\n\n\n\n\n\n","category":"type"},{"location":"pages/charts/#Line","page":"Charts","title":"Line","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"lwc_line","category":"page"},{"location":"pages/charts/#LightweightCharts.Charts.lwc_line","page":"Charts","title":"LightweightCharts.Charts.lwc_line","text":"lwc_line(Vector{LWCSimpleChartItem}; kw...) -> LWCChart\n\nCreates a LWCChart object that contains line chart information. A general method that allows you to customize each chart node using LWCSimpleChartItem.\n\nWrapper function for Line.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nprice_scale_id::LWC_PRICE_SCALE_ID LWC_LEFT (LWC_RIGHT) Y-axis display side.\nlabel_name::String \"\" Chart name.\nvisible::Bool true Chart visibility.\nprecision::Int64 2 Number of decimal places for y-axis values.\nline_color::String Random color Line color.\nline_style::LWC_LINE_STYLES LWC_SOLID (LWC_DOTTED, LWC_DASHED, LWC_LARGE_DASHED, LWC_SPARSE_DOTTED) Line style.\nline_width::Int64 1 Line width.\nline_type::LWC_LINE_TYPES LWC_SIMPLE (LWC_STEP, LWC_CURVED) Line type.\nline_visible::Bool true Line visibility.\npoint_markers_visible::Bool false Displaying markers on line nodes.\npoint_markers_radius::Float64 4.0 Size of markers.\ncrosshair_marker_visible::Bool true Cursor crosshair visibility.\ncrosshair_marker_radius::Float64 4.0 Size of crosshair.\ncrosshair_marker_border_color::String \"#758696\" Border color of crosshair.\ncrosshair_marker_background_color::String \"#4c525e\" Background color of crosshair.\ncrosshair_marker_border_width::Float64 2.0 Border width of the crosshair.\nplugins::Vector{LWCPlugin} LWCPlugin[] Additional plugins.\n\n\n\n\n\nlwc_line(timestamps::Vector{TimeType}, values::Vector{Real}; kw...) -> LWCChart\nlwc_line(timestamps::Vector{Real}, values::Vector{Real}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed timestamps and values.\n\n\n\n\n\nlwc_line(data::Vector{Tuple{TimeType,Real}}; kw...) -> LWCChart\nlwc_line(data::Vector{Tuple{Real,Real}}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed data that describes a vector of timestamps and values.\n\n\n\n\n\nlwc_line(values::Vector{Real}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed values (timestamps begin from 1970-01-01).\n\n\n\n\n\nlwc_line(custom_data::Vector{Any}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed custom_data.\n\nFor more information see Custom data section.\n\n\n\n\n\n","category":"function"},{"location":"pages/charts/#Example","page":"Charts","title":"Example","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:500)\nx_values = map(x -> sin(x / 10), 1:500)\n\nchart = lwc_line(\n    t_values,\n    x_values;\n    label_name = \"lwc_line\",\n    line_color = \"#02c39a\",\n    line_width = 4,\n    line_style = LWC_SOLID,\n    line_type = LWC_CURVED,\n    price_scale_id = LWC_RIGHT,\n)\n\nlwc_save(\"line_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../line_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/#Baseline","page":"Charts","title":"Baseline","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"lwc_baseline","category":"page"},{"location":"pages/charts/#LightweightCharts.Charts.lwc_baseline","page":"Charts","title":"LightweightCharts.Charts.lwc_baseline","text":"lwc_baseline(Vector{LWCSimpleChartItem}; kw...) -> LWCChart\n\nCreates a LWCChart object that contains line chart information. A general method that allows you to customize each chart node using LWCSimpleChartItem.\n\nWrapper function for Baseline.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nprice_scale_id::LWC_PRICE_SCALE_ID LWC_LEFT (LWC_RIGHT) Y-axis display side.\nlabel_name::String \"\" Chart name.\nvisible::Bool true Chart visibility.\nprecision::Int64 2 Number of decimal places for y-axis values.\nbase_value::LWCBaseValue LWCBaseValue(\"price\", 0.0) The value relative to which larger or smaller values will be colored in the appropriate color.\ntop_fill_color1::String \"rgba(38, 166, 154, 0.28)\" The first color of the upper area.\ntop_fill_color2::String \"rgba(38, 166, 154, 0.05)\" The second color of the upper area.\ntop_line_color::String \"rgba(38, 166, 154, 1)\" Color of the upper area line.\nbottom_fill_color1::String \"rgba(239, 83, 80, 0.05)\" The first color of the lower area.\nbottom_fill_color2::String \"rgba(239, 83, 80, 0.28)\" The second color of the lower area.\nbottom_line_color::String \"rgba(239, 83, 80, 1)\" Color of the lower area line.\nline_width::Int64 1 Line width.\nline_style::LWC_LINE_STYLES LWC_SOLID (LWC_DOTTED, LWC_DASHED, LWC_LARGE_DASHED, LWC_SPARSE_DOTTED) Line style.\nline_type::LWC_LINE_TYPES LWC_SIMPLE (LWC_STEP, LWC_CURVED) Line type.\nline_visible::Bool true Line visibility.\npoint_markers_visible::Bool false Displaying markers on line nodes.\npoint_markers_radius::Float64 4.0 Size of markers.\ncrosshair_marker_visible::Bool true Cursor crosshair visibility.\ncrosshair_marker_radius::Float64 4.0 Size of crosshair.\ncrosshair_marker_border_color::String \"#758696\" Border color of crosshair.\ncrosshair_marker_background_color::String \"#4c525e\" Background color of crosshair.\ncrosshair_marker_border_width::Float64 2.0 Border width of the crosshair.\nplugins::Vector{LWCPlugin} LWCPlugin[] Additional plugins.\n\n\n\n\n\nlwc_baseline(timestamps::Vector{TimeType}, values::Vector{Real}; kw...) -> LWCChart\nlwc_baseline(timestamps::Vector{Real}, values::Vector{Real}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed timestamps and values.\n\n\n\n\n\nlwc_baseline(data::Vector{Tuple{TimeType,Real}}; kw...) -> LWCChart\nlwc_baseline(data::Vector{Tuple{Real,Real}}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed data that describes a vector of timestamps and values.\n\n\n\n\n\nlwc_baseline(values::Vector{Real}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed values (timestamps begin from 1970-01-01).\n\n\n\n\n\nlwc_baseline(custom_data::Vector{Any}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed custom_data.\n\nFor more information see Custom data section.\n\n\n\n\n\n","category":"function"},{"location":"pages/charts/#Example-2","page":"Charts","title":"Example","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:500)\nx_values = map(x -> sin(x / 10) + cos(x / 5), 1:500)\n\nchart = lwc_baseline(\n    t_values,\n    x_values;\n    label_name = \"lwc_baseline\",\n    base_value = LWCBaseValue(\"price\", 0.0),\n    line_style = LWC_SOLID,\n    line_type = LWC_CURVED,\n    line_width = 3,\n    precision = 4,\n    price_scale_id = LWC_RIGHT,\n)\n\nlwc_save(\"baseline_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../baseline_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/#Area","page":"Charts","title":"Area","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"lwc_area","category":"page"},{"location":"pages/charts/#LightweightCharts.Charts.lwc_area","page":"Charts","title":"LightweightCharts.Charts.lwc_area","text":"lwc_area(Vector{LWCSimpleChartItem}; kw...) -> LWCChart\n\nCreates a LWCChart object that contains line chart information. A general method that allows you to customize each chart node using LWCSimpleChartItem.\n\nWrapper function for Area.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nprice_scale_id::LWC_PRICE_SCALE_ID LWC_LEFT (LWC_RIGHT) Y-axis display side.\nlabel_name::String \"\" Chart name.\nvisible::Bool true Chart visibility.\nprecision::Int64 2 Number of decimal places for y-axis values.\ntop_color::String \"rgba(46, 220, 135, 0.4)\" Color of the upper part of the area.\nbottom_color::String \"rgba(40, 221, 100, 0)\" Color of the lower part of the area.\ninvert_filled_area::Bool false Inverted display of colors.\nline_color::String Random color Line color.\nline_style::LWC_LINE_STYLES LWC_SOLID (LWC_DOTTED, LWC_DASHED, LWC_LARGE_DASHED, LWC_SPARSE_DOTTED) Line style.\nline_width::Int64 1 Line width.\nline_type::LWC_LINE_TYPES LWC_SIMPLE (LWC_SIMPLE, LWC_STEP, LWC_CURVED) Line type.\npoint_markers_visible::Bool false Displaying markers on line nodes.\npoint_markers_radius::Float64 4.0 Size of markers.\ncrosshair_marker_visible::Bool true Cursor crosshair visibility.\ncrosshair_marker_radius::Float64 4.0 Size of crosshair.\ncrosshair_marker_border_color::String \"#758696\" Border color of crosshair.\ncrosshair_marker_background_color::String \"#4c525e\" Background color of crosshair.\ncrosshair_marker_border_width::Float64 2.0 Border width of the crosshair.\nplugins::Vector{LWCPlugin} LWCPlugin[] Additional plugins.\n\n\n\n\n\nlwc_area(timestamps::Vector{TimeType}, values::Vector{Real}; kw...) -> LWCChart\nlwc_area(timestamps::Vector{Real}, values::Vector{Real}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed timestamps and values.\n\n\n\n\n\nlwc_area(data::Vector{Tuple{TimeType,Real}}; kw...) -> LWCChart\nlwc_area(data::Vector{Tuple{Real,Real}}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed data that describes a vector of timestamps and values.\n\n\n\n\n\nlwc_area(values::Vector{Real}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed values (timestamps begin from 1970-01-01).\n\n\n\n\n\nlwc_area(custom_data::Vector{Any}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed custom_data.\n\nFor more information see Custom data section.\n\n\n\n\n\n","category":"function"},{"location":"pages/charts/#Example-3","page":"Charts","title":"Example","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using Dates\nusing LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:500)\nx_values = map(x -> x % 20, 1:500)\n\nchart = lwc_area(\n    t_values,\n    x_values;\n    label_name = \"lwc_area\",\n    line_color = \"#00b4d8\",\n    top_color = \"#90e0ef\",\n    bottom_color = \"rgba(133, 242, 240, 0)\",\n    line_style = LWC_SOLID,\n    line_type = LWC_STEP,\n    line_width = 2,\n    precision = 3,\n    price_scale_id = LWC_RIGHT,\n)\n\nlwc_save(\"area_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../area_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/#Histogram","page":"Charts","title":"Histogram","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"lwc_histogram","category":"page"},{"location":"pages/charts/#LightweightCharts.Charts.lwc_histogram","page":"Charts","title":"LightweightCharts.Charts.lwc_histogram","text":"lwc_histogram(Vector{LWCSimpleChartItem}; kw...) -> LWCChart\n\nCreates a LWCChart object that contains line chart information. A general method that allows you to customize each chart node using LWCSimpleChartItem.\n\nWrapper function for Histogram.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nprice_scale_id::LWC_PRICE_SCALE_ID LWC_LEFT (LWC_RIGHT) Y-axis display side.\nlabel_name::String \"\" Chart name.\nvisible::Bool true Chart visibility.\nprecision::Int64 2 Number of decimal places for y-axis values.\ncolor::String Random color Histogram color.\nbase::Real 0.0 The value relative to which the larger or smaller histogram values will be located.\nplugins::Vector{LWCPlugin} LWCPlugin[] Additional plugins.\n\n\n\n\n\nlwc_histogram(timestamps::Vector{TimeType}, values::Vector{Real}; kw...) -> LWCChart\nlwc_histogram(timestamps::Vector{Real}, values::Vector{Real}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed timestamps and values.\n\n\n\n\n\nlwc_histogram(data::Vector{Tuple{TimeType,Real}}; kw...) -> LWCChart\nlwc_histogram(data::Vector{Tuple{Real,Real}}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed data that describes a vector of timestamps and values.\n\n\n\n\n\nlwc_histogram(values::Vector{Real}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed values (timestamps begin from 1970-01-01).\n\n\n\n\n\nlwc_histogram(custom_data::Vector{Any}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed custom_data.\n\nFor more information see Custom data section.\n\n\n\n\n\n","category":"function"},{"location":"pages/charts/#Example-4","page":"Charts","title":"Example","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:500)\nx_values = map(x -> x * cos(x / 10), 1:500)\n\nchart = lwc_histogram(\n    t_values,\n    x_values;\n    label_name = \"lwc_histogram\",\n    base = 0.0,\n    color = \"rgba(240, 113, 103, 0.5)\",\n    price_scale_id = LWC_RIGHT,\n)\n\nlwc_save(\"histogram_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../histogram_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/#OHLC-Candles","page":"Charts","title":"OHLC Candles","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"LWCCandleChartItem","category":"page"},{"location":"pages/charts/#LightweightCharts.ChartData.LWCCandleChartItem","page":"Charts","title":"LightweightCharts.ChartData.LWCCandleChartItem","text":"LWCCandleChartItem(time::Int64, open::Real, high::Real, low::Real, close::Real; kw...)\nLWCCandleChartItem(time::TimeType, open::Real, high::Real, low::Real, close::Real; kw...)\n\nRepresentation of candlestick data for lwc_candlestick and lwc_bar methods.\n\nFields\n\ntime::Int64\nopen::Float64\nhigh::Float64\nlow::Float64\nclose::Float64\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\ncolor::String nothing Candle color.\nborder_color::String nothing Border color.\nwick_color::String nothing Wick color.\n\n\n\n\n\n","category":"type"},{"location":"pages/charts/#Candlestick","page":"Charts","title":"Candlestick","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"lwc_candlestick","category":"page"},{"location":"pages/charts/#LightweightCharts.Charts.lwc_candlestick","page":"Charts","title":"LightweightCharts.Charts.lwc_candlestick","text":"lwc_candlestick(data::Vector{LWCCandleChartItem}; kw...) -> LWCChart\n\nCreates a LWCChart object that contains candlesticks chart information. A general method that allows you to customize each chart node using LWCCandleChartItem.\n\nWrapper function for Candlestick.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nprice_scale_id::LWC_PRICE_SCALE_ID LWC_LEFT (LWC_RIGHT) Y-axis display side.\nlabel_name::String \"\" Chart name.\nvisible::Bool true Chart visibility.\nprecision::Int64 2 Number of decimal places for y-axis values.\nup_color::String \"#26a69a\" Color of bullish candle (increasing).\ndown_color::String \"#ef5350\" Color of bearish candle (decreasing).\nwick_visible::Bool true Wick visibility.\nborder_visible::Bool true Candle borders visibility.\nborder_color::String \"#378658\" Candle border color.\nborder_up_color::String \"#26a69a\" Boder color of bullish candle.\nborder_down_color::String \"#ef5350\" Boder color of bearish candle.\nwick_color::String \"#737375\" Wick color.\nwick_up_color::String \"#26a69a\" Wick color of bullish candle.\nwick_down_color::String \"#ef5350\" Wick color of bearish candle.\nplugins::Vector{LWCPlugin} LWCPlugin[] Additional plugins.\n\n\n\n\n\nlwc_candlestick(arg...; kw...) -> LWCChart\n\nCreates a LWCChart from the passed arg that describes the corresponding candlestick values.\n\nArguments\n\ntimestamps::Vector{Union{Real,TimeType}}\nopen::Vector{Real}\nhigh::Vector{Real}\nlow::Vector{Real}\nclose::Vector{Real}\n\n\n\n\n\nlwc_candlestick(data::Vector{Tuple{D,O,H,L,C}}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed data that describes a vector of candles. Here D is a Real or TimeType and O,H,L,C are Reals.\n\n\n\n\n\nlwc_candlestick(custom_data::Vector{Any}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed custom_data.\n\nFor more information see Custom data section.\n\n\n\n\n\n","category":"function"},{"location":"pages/charts/#Example-5","page":"Charts","title":"Example","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using Dates\nusing LightweightCharts\n\nopen_time = now() .+ Second.(1:500)\nx_values = map(x -> sin(2rand() + x / 10), 1:500)\n\nchart = lwc_candlestick(\n    LWCCandleChartItem.(\n        open_time,\n        x_values,\n        x_values .+ rand(500),\n        x_values .- rand(500),\n        [x_values[2:end]..., x_values[begin]],\n    );\n    label_name = \"lwc_candlestick\",\n    up_color = \"#52a49a\",\n    down_color = \"#de5e57\",\n    border_visible = false,\n    price_scale_id = LWC_RIGHT,\n)\n\nlwc_save(\"candlestick_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../candlestick_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/#Bar","page":"Charts","title":"Bar","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"lwc_bar","category":"page"},{"location":"pages/charts/#LightweightCharts.Charts.lwc_bar","page":"Charts","title":"LightweightCharts.Charts.lwc_bar","text":"lwc_bar(data::Vector{LWCCandleChartItem}; kw...) -> LWCChart\n\nCreates a LWCChart object that contains bar chart information. A general method that allows you to customize each chart node using LWCCandleChartItem.\n\nWrapper function for Bar.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nprice_scale_id::LWC_PRICE_SCALE_ID LWC_LEFT (LWC_RIGHT) Y-axis display side.\nlabel_name::String \"\" Chart name.\nvisible::Bool true Chart visibility.\nprecision::Int64 2 Number of decimal places for y-axis values.\nup_color::String \"#26a69a\" Color of bullish candle (increasing).\ndown_color::String \"#ef5350\" Color of bearish candle (decreasing).\nopen_visible::Bool true Open tick visibility.\nthin_bars::Bool true Thin bars.\nplugins::Vector{LWCPlugin} LWCPlugin[] Additional plugins.\n\n\n\n\n\nlwc_bar(arg...; kw...) -> LWCChart\n\nCreates a LWCChart from the passed arg that describes the corresponding candlestick values.\n\nArguments\n\ntimestamps::Vector{Union{Real,TimeType}}\nopen::Vector{Real}\nhigh::Vector{Real}\nlow::Vector{Real}\nclose::Vector{Real}\n\n\n\n\n\nlwc_bar(data::Vector{Tuple{D,O,H,L,C}}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed data that describes a vector of candles. Here D is a Real or TimeType and O,H,L,C are Reals.\n\n\n\n\n\nlwc_bar(custom_data::Vector{Any}; kw...) -> LWCChart\n\nCreates a LWCChart from the passed custom_data.\n\nFor more information see Custom data section.\n\n\n\n\n\n","category":"function"},{"location":"pages/charts/#Example-6","page":"Charts","title":"Example","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using Dates\nusing LightweightCharts\n\nopen_time = now() .+ Second.(1:500)\nx_values = map(x -> sin(2rand() + x / 10), 1:500)\n\nchart = lwc_bar(\n    LWCCandleChartItem.(\n        open_time,\n        x_values,\n        x_values .+ rand(500),\n        x_values .- rand(500),\n        [x_values[2:end]..., x_values[begin]],\n    );\n    label_name = \"lwc_bar\",\n    up_color = \"#52a49a\",\n    down_color = \"#de5e57\",\n    price_scale_id = LWC_RIGHT,\n)\n\nlwc_save(\"bar_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../bar_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/#Multi-colors","page":"Charts","title":"Multi-colors","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"LWCSimpleChartItem","category":"page"},{"location":"pages/charts/#LightweightCharts.ChartData.LWCSimpleChartItem","page":"Charts","title":"LightweightCharts.ChartData.LWCSimpleChartItem","text":"LWCSimpleChartItem(time::Int64, value::Real; kw...)\nLWCSimpleChartItem(time::TimeType, value::Real; kw...)\n\nThis data type allows you to customize the colors for each point of your chart. Supported for lwc_line, lwc_area, lwc_baseline and lwc_histogram methods.\n\nFields\n\ntime::Int64: Data unix time.\nvalue::Float64: Data value.\n\nKeyword arguments\n\nName::Type Default (Possible values) Description\nline_color::String nothing Line color.\ntop_color::String nothing Top color.\nbottom_color::String nothing Bottom color.\ntop_fill_color_1::String nothing Top fill color 1.\ntop_fill_color_2::String nothing Top fill color 2.\ntop_line_color::String nothing Top line color.\nbottom_fill_color_1::String nothing Bottom fill color 1.\nbottom_fill_color_2::String nothing Bottom fill color 2.\nbottom_line_color::String nothing Bottom line color.\ncolor::String nothing Color.\n\n\n\n\n\n","category":"type"},{"location":"pages/charts/#Example-7","page":"Charts","title":"Example","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using Dates\nusing LightweightCharts\nimport LightweightCharts: randcolor\n\nt_range = 1:500\n\nchart = lwc_baseline(\n    map(\n        x -> LWCSimpleChartItem(\n            now() + Second(x),\n            cos.(x / 10);\n            color = randcolor(),\n            top_line_color = randcolor(),\n            top_fill_color_1 = randcolor(),\n            bottom_line_color = randcolor(),\n            bottom_fill_color_2 = randcolor(),\n        ),\n        t_range,\n    );\n    label_name = \"lwc_baseline\",\n    line_type = LWC_STEP,\n    price_scale_id = LWC_RIGHT,\n    line_width = 4,\n)\n\nlwc_save(\"colors_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../colors_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/#custom_data","page":"Charts","title":"Custom data","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"Vectors with custom data types can also be visualized.","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"The simplest way to add visualization support to your custom type is to define a new conversion method from CustomType to Tuple with the following signature:","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"For simple charts (e.g lwc_line, lwc_area, ...)","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"Base.convert(::Type{Tuple}, x::CustomType)::Tuple{TimeType,Real} = ...\n# OR\nBase.convert(::Type{Tuple}, x::CustomType)::Tuple{Real,Real} = ...","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"For candle charts (e.g lwc_candlestick, lwc_bar)","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"Base.convert(::Type{Tuple}, x::CustomType)::Tuple{TimeType,Real,Real,Real,Real} = ...\n# OR\nBase.convert(::Type{Tuple}, x::CustomType)::Tuple{Real,Real,Real,Real,Real} = ...","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"If such a conversion method is already defined for other purposes, then you can define another conversion methods that allows you to create objects LWCSimpleChartItem or LWCCandleChartItem (this method provides more flexible customization options).","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"Base.convert(::Type{LWCSimpleChartItem}, x::CustomType) = LWCSimpleChartItem(...)\n# OR / AND\nBase.convert(::Type{LWCCandleChartItem}, x::CustomType) = LWCCandleChartItem(...)","category":"page"},{"location":"pages/charts/#Examples","page":"Charts","title":"Examples","text":"","category":"section"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using Dates\nusing LightweightCharts\n\nstruct Point\n    timestamp::DateTime\n    value::Float64\nend\n\nBase.convert(::Type{Tuple}, x::Point) = (x.timestamp, x.value)\n# OR\nfunction Base.convert(::Type{LWCSimpleChartItem}, x::Point)\n    return LWCSimpleChartItem(x.timestamp, x.value)\nend\n\npoints = [Point(now() + Second(x), sin(x / 10.0)) for x in 1:500]\n\nchart = lwc_line(\n    points;\n    label_name = \"custom points\",\n    line_color = \"#a8dadc\",\n    line_width = 3,\n)\n\nlwc_save(\"custom_simple_type_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../custom_simple_type_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"using Dates\nusing LightweightCharts\n\nstruct OHLC\n    timestamp::DateTime\n    open::Float64\n    high::Float64\n    low::Float64\n    close::Float64\nend\n\nBase.convert(::Type{Tuple}, x::OHLC) = (x.timestamp, x.open, x.high, x.low, x.close)\n# OR\nfunction Base.convert(::Type{LWCCandleChartItem}, x::OHLC)\n    return LWCCandleChartItem(x.timestamp, x.open, x.high, x.low, x.close)\nend\n\ncandles = [OHLC(now() + Second(x), rand(), rand(), rand(), rand()) for x in 1:500]\n\nchart = lwc_candlestick(\n    candles;\n    label_name = \"custom candles\",\n)\n\nlwc_save(\"custom_candle_type_example.html\", chart)\nnothing # hide","category":"page"},{"location":"pages/charts/","page":"Charts","title":"Charts","text":"    <iframe src=\"../custom_candle_type_example.html\" style=\"height:500px;width:100%;\"></iframe>","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: animation)","category":"page"},{"location":"#LightweightCharts.jl","page":"Home","title":"LightweightCharts.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LightweightCharts is a convenient Julia wrapper for the Lightweight Charts™ library by TradingView, Inc., designed to output graphical data to an HTML page.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install LightweightCharts, simply use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add LightweightCharts","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple line chart with styling options:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LightweightCharts\n\nt_values = round(Int64, time()) .+ collect(1:500)\nx_values = sin.((1:500) / 10)\n\nchart = lwc_line(\n    t_values,\n    x_values;\n    label_name = \"lwc_line\",\n    line_color = \"orange\",\n    line_width = 4,\n    line_style = LWC_SOLID,\n    line_type = LWC_STEP,\n    price_scale_id = LWC_LEFT,\n    plugins = LWCPlugin[\n        lwc_trend_line(100, 0.32, 200, 0.86; line_color = \"#9d4edd\"),\n        # lwc_delta_tooltip(),\n        # lwc_vert_line(150),\n        # lwc_crosshair_highlight_bar(),\n        # lwc_tooltip(; title = \"my_tooltip\")\n    ],\n)\n\nlwc_show(chart)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: chart)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package also support custom data types (for more information, see the documentation). In the following example we used TimeArrays to smooth prices:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TimeArrays\nusing LightweightCharts\n\njulia> prices = ta_price_sample_data()\n7777-element TimeArray{DateTime, Float64}:\n TimeTick(2024-04-01T00:00:00.661, 0.6501)\n TimeTick(2024-04-01T00:05:57.481, 0.6505)\n ⋮\n TimeTick(2024-04-30T23:42:11.920, 0.4417)\n\npanel = lwc_panel(\n   lwc_line(\n       prices;\n       label_name = \"price\",\n       line_color = \"#adb5bd\",\n       line_type = LWC_STEP,\n       precision = 4,\n   ),\n   lwc_line(\n       ta_sma(prices, 20);\n       label_name = \"sma price\",\n       line_color = \"red\",\n       precision = 4,\n   ),\n   lwc_line(\n       ta_wma(prices, 20);\n       label_name = \"wma price\",\n       line_color = \"orange\",\n       precision = 4,\n   ),\n   lwc_line(\n       ta_ema(prices, 20);\n       label_name = \"ema price\",\n       line_color = \"green\",\n       precision = 4,\n   );\n   name = \"LightweightCharts ❤️ TimeArrays\"\n)\n\nlwc_show(panel)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: panel)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Composite layout featuring diverse chart types:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Dates\nusing NanoDates\nusing LightweightCharts\n\nlayout = lwc_layout(\n    lwc_panel(\n        lwc_area(\n            NanoDate(\"2024-01-01\") .+ Second.(1:500),\n            map(x -> rand(1:500), collect(1:500));\n            label_name = \"lwc_area\",\n            line_color = \"#49c7e3\",\n            top_color = \"#74d7ed\",\n            bottom_color = \"#85f2f000\",\n            line_style = LWC_SOLID,\n            line_type = LWC_STEP,\n            line_width = 2,\n            precision = 3,\n            price_scale_id = LWC_LEFT,\n        ),\n        lwc_line(\n            NanoDate(\"2024-01-01\") .+ Second.(1:500),\n            map(x -> rand(1:500), collect(1:500));\n            label_name = \"lwc_line\",\n            line_color = \"#ff5752\",\n            line_style = LWC_DASHED,\n            line_type = LWC_SIMPLE,\n            line_width = 3,\n            price_scale_id = LWC_RIGHT,\n        );\n        x = 1,\n        y = 1,\n    ),\n    lwc_panel(\n        lwc_baseline(\n            NanoDate(\"2024-01-01\") .+ Second.(1:500),\n            map(x -> rand(1:500), collect(1:500));\n            label_name = \"lwc_baseline\",\n            base_value = LWCBaseValue(\"price\", 250),\n            line_style = LWC_SOLID,\n            line_type = LWC_CURVED,\n            line_width = 3,\n            precision = 4,\n            price_scale_id = LWC_RIGHT,\n        );\n        x = 2,\n        y = 1,\n    );\n    name = \"LightweightCharts ❤️ Julia\"\n)\n\nlwc_show(layout)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: layout)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Scatter plot with distinct color:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LightweightCharts\n\nchart = lwc_panel(\n    lwc_line(\n        round(Int64, time()) .+ collect(1:5000),\n        map(x -> 1.4 + rand([0.0:0.005:0.8..., 0.8:0.01:0.9...])^10.0, 1:5000);\n        label_name = \"scatter_purple\",\n        line_color = \"#9558b2\",\n        point_markers_visible = true,\n        line_visible = false,\n    ),\n    lwc_line(\n        round(Int64, time()) .+ collect(1:5000),\n        map(x -> 1.2 + rand([0.0:0.005:0.8..., 0.8:0.01:0.9...])^10.0, 1:5000);\n        label_name = \"scatter_green\",\n        line_color = \"#389826\",\n        point_markers_visible = true,\n        line_visible = false,\n    ),\n    lwc_line(\n        round(Int64, time()) .+ collect(1:5000),\n        map(x -> 1.0 + rand([0.0:0.005:0.8..., 0.8:0.01:0.9...])^10.0, 1:5000);\n        label_name = \"scatter_red\",\n        line_color = \"#cb3c33\",\n        point_markers_visible = true,\n        line_visible = false,\n    );\n    max_y = 1.6\n)\n\nlwc_show(chart)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: scatter)","category":"page"}]
}
